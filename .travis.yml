language: shell
os: linux

env:
  global:
    - NODE_VERSION=14
    - CC_TEST_REPORTER_ID=46ef31dae5b656e0f4be410a86bd83bdcf73e7d27ab33a704c197e6fe4bf02a0
    - DOCKER_CLI_EXPERIMENTAL=enabled
    - IMAGE_VERSION=develop

before_install:

  # Install docker with buildx
  - sudo rm -rf /var/lib/apt/lists/*
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - lsb_release -cs
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) edge"
  - sudo apt-get update
  - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
  - docker run --rm --privileged docker/binfmt:820fdd95a9972a5308930a2bdfb8573dd4447ad3
  - cat /proc/sys/fs/binfmt_misc/qemu-aarch64

  # Install Nodejs
  - nvm install $NODE_VERSION

  # Init Code Climate
  - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  - chmod +x ./cc-test-reporter
  - ./cc-test-reporter before-build

install:

  # Install npm dependencies
  - npm ci

  # Run Linter
  - npm run lint

  # Build wud docker image
  - docker build -t wud .

script:

  # Run Unit tests
  - npm test

  # Pull nginx as a test image
  - docker pull nginx:1.10-alpine

  # Tag nginx as if it was coming from private Hub, ECR...

  - docker tag nginx:1.10-alpine fmartinou/test:1.0.0
  - docker tag nginx:1.10-alpine 229211676173.dkr.ecr.eu-west-1.amazonaws.com/test:1.0.0
  - docker tag nginx:1.10-alpine 229211676173.dkr.ecr.eu-west-1.amazonaws.com/sub/test:1.0.0
  - docker tag nginx:1.10-alpine 229211676173.dkr.ecr.eu-west-1.amazonaws.com/sub/sub/test:1.0.0
  - docker tag nginx:1.10-alpine gcr.io/wud-test/test:1.0.0
  - docker tag nginx:1.10-alpine gcr.io/wud-test/sub/test:1.0.0
  - docker tag nginx:1.10-alpine gcr.io/wud-test/sub/sub/test:1.0.0

  # Run containers for tests

  # HUB
  - docker run -d --name hub_library_nginx --label "wud.watch=true" --label "wud.tag.include=^[0-9]\d*\.[0-9]\d*-alpine$" nginx:1.10-alpine
  - docker run -d --name hub_private       --label "wud.watch=true" fmartinou/test:1.0.0

  # ECR
  - docker run -d --name ecr_test          --label "wud.watch=true" 229211676173.dkr.ecr.eu-west-1.amazonaws.com/test:1.0.0
  - docker run -d --name ecr_sub_test      --label "wud.watch=true" 229211676173.dkr.ecr.eu-west-1.amazonaws.com/sub/test:1.0.0
  - docker run -d --name ecr_sub_sub_test  --label "wud.watch=true" 229211676173.dkr.ecr.eu-west-1.amazonaws.com/sub/sub/test:1.0.0

  # GCR
  - docker run -d --name gcr_test          --label "wud.watch=true" gcr.io/wud-test/test:1.0.0
  - docker run -d --name gcr_sub_test      --label "wud.watch=true" gcr.io/wud-test/sub/test:1.0.0
  - docker run -d --name gcr_sub_sub_test  --label "wud.watch=true" gcr.io/wud-test/sub/sub/test:1.0.0

  # Run wud docker image
  - >
    docker run -d
    --name wud
    --publish 3000:3000
    --volume /var/run/docker.sock:/var/run/docker.sock
    --env WUD_TRIGGER_MOCK_EXAMPLE_MOCK=mock
    --env WUD_WATCHER_LOCAL_WATCHBYDEFAULT=false
    --env WUD_REGISTRY_HUB_LOGIN="$DOCKER_USERNAME"
    --env WUD_REGISTRY_HUB_TOKEN="$DOCKER_PASSWORD"
    --env WUD_REGISTRY_ECR_ACCESSKEYID="$AWS_ACCESSKEY_ID"
    --env WUD_REGISTRY_ECR_SECRETACCESSKEY="$AWS_SECRET_ACCESSKEY"
    --env WUD_REGISTRY_ECR_REGION=eu-west-1
    --env WUD_REGISTRY_GCR_CLIENTEMAIL="$GCR_CLIENT_EMAIL"
    --env WUD_REGISTRY_GCR_PRIVATEKEY="$GCR_PRIVATE_KEY"
    wud

  # Give wud a little time to fetch all available updates
  - sleep 10

  # Run E2E Tests
  - npm run cucumber

  # Report to Code Climate
  - ./cc-test-reporter after-build -t lcov --debug --exit-code $TRAVIS_TEST_RESULT;

after_success:

  - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
  - docker version
  - make prepare

  # Override image version with latest if master branch
  - if [ "$TRAVIS_BRANCH" == "master" ] ; then export IMAGE_VERSION=latest; fi

  # Override image version with tag name if any
  - if [ ! -z "$TRAVIS_TAG" ] ; then export IMAGE_VERSION=$TRAVIS_TAG; fi

  # Build & push image
  - make build IMAGE_NAME=$DOCKER_USERNAME/whats-up-docker BASE_IMAGE=node:current-alpine IMAGE_VERSION=$IMAGE_VERSION PLATFORMS=linux/arm/v6,linux/arm/v7,linux/arm64/v8,linux/amd64
