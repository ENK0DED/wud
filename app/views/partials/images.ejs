<h1 class="title">Images</h1>

<script>
    const template = `

    `
</script>
<div class="table-container">
    <table class="table is-narrow ">
        <thead>
        <tr>
            <th class="nowrap"></th>
            <th class="nowrap">Watcher</th>
            <th class="nowrap">Registry</th>
            <th class="nowrap">Image</th>
            <th class="nowrap">Tag</th>
            <th class="nowrap">Semver?</th>
            <th class="nowrap">Digest</th>
            <th class="nowrap">Date</th>
            <th class="nowrap">Arch/Os</th>
            <th class="nowrap">Size</th>
            <th class="nowrap">Include Tags</th>
            <th class="nowrap">Exclude Tags</th>
            <th class="nowrap">Result tag</th>
            <th class="nowrap">Result digest</th>
            <th>
                <button id="btn-watch-all" class="button is-black watch" onclick="watchAll()">
                    Watch all now
                </button>
            </th>
        </tr>
        </thead>
        <tbody>
        <% images.forEach((image) => { %>
            <tr>
                <td>
                    <span
                            class="icon
                            <%= image.toBeUpdated ? 'has-text-danger' : 'has-text-primary' %>"
                            title="<%= image.toBeUpdated ? 'Update available' : 'Up to date' %>">
                    <i class="fas <%= image.toBeUpdated ? 'fa-exclamation-triangle' : 'fa-check' %>"></i>
                  </span>
                </td>
                <td><%= image.watcher %></td>
                <td>
                <span class="icon is-large" title="<%= image.registryUrl %>">
                    <% switch (image.registry) {
                    case 'hub' : %>
                    <i class="fab fa-docker fa-2x"></i>
                    <% break;
                    case 'gcr' : %>
                    <i class="fab fa-google fa-2x"></i>
                    <% break;
                    case 'ecr' : %>
                    <i class="fab fa-aws fa-2x"></i>
                    <% break;
                    case 'acr' : %>
                    <i class="fab fa-microsoft fa-2x"></i>
                    <% break;
                    default : %>
                    <i class="fas fa-question fa-2x"></i>
                    <% break;
                    } %>
                </span>
                </td>
                <td><%= image.image %></td>
                <td><span class="tag is-medium"><%= image.tag %></span></td>
                <td>
                    <span class="icon <%= image.isSemver ? 'has-text-primary' : 'has-text-danger' %>">
                        <i class="fas <%= image.isSemver ? 'fa-check' : 'fa-times' %>"></i>
                  </span>
                </td>
                <td><span class="tag is-medium" title="<%= image.digest %>"><%= image.digest.substring(0, 15) %>...</span></td>
                <td class="nowrap">
                    <%= moment(image.versionDate).format('DD-MM-YYYY HH:MM:SS') %>
                </td>
                <td><%= image.os %>/<%= image.architecture %></td>
                <td class="nowrap">
                    <%= (image.size / (1024 * 1024)).toFixed(2) %> MB
                </td>
                <td class="nowrap">
                    <%= image.includeTags %>
                </td>
                <td class="nowrap">
                    <%= image.excludeTags %>
                </td>
                <td id="td-new-tag-<%= image.id %>">
                    <% if (image.result.tag) { %>
                        <span class="tag is-medium"><%= image.result.tag %></span>
                    <% } %>
                </td>
                <td id="td-new-digest-<%= image.id %>">
                    <% if (image.result.digest) { %>
                        <span class="tag is-medium" title="<%= image.result.digest %>"><%= image.result.digest.substring(0, 15) %>...</span>
                    <% } %>
                </td>
                <td>
                    <button id="btn-watch-<%= image.id %>" class="button is-black watch" onclick="watch('<%= image.id %>')">
                        Watch now
                    </button>
                </td>
            </tr>
        <% }); %>
        </tbody>
    </table>
</div>

<script>

    /**
     * Patch Image with new result.
     * @param image
     */
    function patchImage(image) {
        const resultTag = image.result.tag ? `<span class="tag is-medium">${image.result.tag}</span>` : '';
        const resultDigest = image.result.digest ? `<span class="tag is-medium" title="${image.result.digest}">${image.result.digest.substring(0, 15)}...</span>` : '';
        document.getElementById(`td-new-tag-${image.id}`).innerHTML = resultTag;
        document.getElementById(`td-new-digest-${image.id}`).innerHTML = resultDigest;
    }

    /**
     * Trigger watch image.
     * @param imageId
     * @returns {Promise<void>}
     */
    async function watch(imageId) {
        const btnWatch = document.getElementById(`btn-watch-${imageId}`);
        // Add loading spinner to the button
        btnWatch.classList.add('is-loading');

        // Call Watch API
        try {
            const response = await fetch(`/api/images/${imageId}/watch`, {method: 'POST'});
            const image = await response.json();

            // Patch image in UI
            patchImage(image);

            // Display success message
            if (image.toBeUpdated) {
                window.message.display('New version found', `A new version for ${image.image}:${image.tag} is available!`);
            }
        } catch (e) {
            // Display error message
            window.message.display('Oops... an error occurred', e.message ? e.message : 'Unknown error', true);
        } finally {
            btnWatch.classList.remove('is-loading');
        }
    }

    async function watchAll() {
        const btnWatch = document.getElementById(`btn-watch-all`);
        // Add loading spinner to the button
        btnWatch.classList.add('is-loading');

        // Call Watch API
        try {
            const response = await fetch(`/api/images/watch`, {method: 'POST'});
            const images = await response.json();

            images.forEach((image) => patchImage(image));
        } catch (e) {
            // Display error message
            window.message.display('Oops... an error occurred', e.message ? e.message : 'Unknown error', true);
        } finally {
            btnWatch.classList.remove('is-loading');
        }
    }
</script>

<style>
    td {
        vertical-align: middle;
    }

    button.watch {
        width: 150px;
    }
</style>